I"è<p>This repository contains a high-level encapsulation for using <a href="https://www.elastic.co/downloads/elasticsearch">Elasticsearch</a> with python in just a few lines.</p>

<h2 id="installation">Installation</h2>
<p>Via pip:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>easy-elasticsearch
</code></pre></div></div>
<p>Via git repo:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/kwang2049/easy-elasticsearch
pip <span class="nb">install</span> <span class="nt">-e</span> <span class="nb">.</span> 
</code></pre></div></div>
<p>To get the backend server program as the very last step, one also needs to download official Elasticsearch: (please find the <a href="https://www.elastic.co/downloads/elasticsearch">suitable version</a> for your OS if not using Linux x86/64)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.12.1-linux-x86_64.tar.gz
tar -xf elasticsearch-7.12.1-linux-x86_64.tar.gz
</code></pre></div></div>

<h2 id="usage">Usage</h2>
<p>Just first create an ElasticSearchBM25 object while indicating the text pool to be indexed and your local path to elasticsearch-xx.xx.xx/bin; then either call its <code class="language-plaintext highlighter-rouge">rank</code> or <code class="language-plaintext highlighter-rouge">score</code> function for retrieval or calculating BM25 scores.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">easy_elasticsearch</span> <span class="kn">import</span> <span class="n">ElasticSearchBM25</span>

<span class="n">pool</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'id1'</span><span class="p">:</span> <span class="s">'What is Python? Is it a programming language'</span><span class="p">,</span>
    <span class="s">'id2'</span><span class="p">:</span> <span class="s">'Which Python version is the best?'</span><span class="p">,</span>
    <span class="s">'id3'</span><span class="p">:</span> <span class="s">'Using easy-elasticsearch in Python is really convenient!'</span>
<span class="p">}</span>
<span class="n">bm25</span> <span class="o">=</span> <span class="n">ElasticSearchBM25</span><span class="p">(</span><span class="n">pool</span><span class="p">,</span> <span class="s">'elasticsearch-7.12.1/bin'</span><span class="p">)</span>  <span class="c1"># remember to use your local path of elasticsearh/bin
</span>
<span class="n">query</span> <span class="o">=</span> <span class="s">"What is Python?"</span>
<span class="n">rank</span> <span class="o">=</span> <span class="n">bm25</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">topk</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>  <span class="c1"># topk should be &lt;= 10000
</span><span class="n">scores</span> <span class="o">=</span> <span class="n">bm25</span><span class="p">.</span><span class="n">score</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">document_ids</span><span class="o">=</span><span class="p">[</span><span class="s">'id2'</span><span class="p">,</span> <span class="s">'id3'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">rank</span><span class="p">,</span> <span class="n">scores</span><span class="p">)</span>
</code></pre></div></div>
<p>Another example for retrieving Quora questions can be found in <a href="https://github.com/kwang2049/easy-elasticsearch/blob/main/example/quora.py">example/quora.py</a>.</p>
:ET